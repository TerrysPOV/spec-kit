version: "3.9"
services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_resume_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-staging_password}
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_resume_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_staging_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Application services
  intel-svc:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_REPO:-ai-resume-assistant}/intel-svc:${TAG:-latest}
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-staging_password}@postgres:5432/ai_resume_staging
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  render-svc:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_REPO:-ai-resume-assistant}/render-svc:${TAG:-latest}
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-staging_password}@postgres:5432/ai_resume_staging
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  gateway:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_REPO:-ai-resume-assistant}/gateway:${TAG:-latest}
    ports:
      - "${GATEWAY_PORT:-8081}:8080"
    environment:
      # Service URLs
      INTEL_URL: "http://intel-svc:8081/intel/lookup_company"
      RENDER_URL: "http://render-svc:8082/render/resume"
      # Database
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-staging_password}@postgres:5432/ai_resume_staging
      # Redis
      REDIS_URL: redis://redis:6379/0
      # Auth
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3001}
      # OpenRouter
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      # Rate limiting
      MONTHLY_COST_CAP_USD: "5"  # Lower limit for staging
      ALLOWED_EMAILS: ${ALLOWED_EMAILS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      intel-svc:
        condition: service_started
      render-svc:
        condition: service_started
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Reverse proxy with TLS
  traefik:
    image: traefik:v3.1
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_staging:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_HOST:-traefik.staging.ai-resume.com}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_staging_data:
  redis_staging_data:
  letsencrypt_staging:
  prometheus_staging_data:
  grafana_staging_data:

networks:
  default:
    name: ai-resume-staging